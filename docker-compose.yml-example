version: '3.8'
services:
  ## PG Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: surahman
      POSTGRES_PASSWORD: 12345
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "4321"
    ports:
      - "4321:4321"
    command: -p 4321
    restart: always

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: surahman
      POSTGRES_PASSWORD: 12345
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "6543:6543"
    restart: always

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:6.0.13
    restart: always
    ports:
      - "27010:27010"
    expose:
      - "27010"
    volumes:
      - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: surahman
      MYSQL_PASSWORD: 12345

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: surahman
      DB_PASSWORD: 12345
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8081:8081"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.3
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Eureka Server
  discovery-server:
#    image: surahman325/discovery-server:latest
    image: registry.hub.docker.com/surahman325/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin

  api-gateway:
#    image: surahman325/api-gateway:latest
    image: registry.hub.docker.com/surahman325/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
#      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
#    image: surahman325/product-service:latest
    image: registry.hub.docker.com/surahman325/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
#    image: surahman325/order-service:latest
    image: registry.hub.docker.com/surahman325/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:4321/order-service
    depends_on:
      - postgres-order
      - broker
#      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
#    image: surahman325/inventory-service:latest
    image: registry.hub.docker.com/surahman325/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:6543/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
#    image: surahman325/notification-service:latest
    image: registry.hub.docker.com/surahman325/notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
#      - zipkin
      - broker
      - discovery-server
      - api-gateway

  ## Prometheus
#  prometheus:
#    image: prom/prometheus:v2.37.1
#    container_name: prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:
#      - product-service
#      - inventory-service
#      - order-service
#      - notification-service
#
#  grafana:
#    image: grafana/grafana-oss:8.5.2
#    container_name: grafana
#    restart: always
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=password